# How this works:
#
# If a module wants to enable theme switching it adds an entry to the
# switchApps option attribute set. The entry contains paths to the xdg config
# files generated by the module. We change the target of the config's
# xdg.configFile attribute to darkman/variants/PATH.dark where PATH is the
# original config path relative to xdg.configHome. It's named .dark because it
# is assumed that all apps are originally configured as dark themes.
#
# To generate the light theme, we use a script that runs every time hm
# activates. The script uses sed to replace all occurences of base16 dark
# colors with their base16 light counterpart. This generates a new file at
# darkman/variants/PATH.light. Now we have a light and dark variant, but the
# original config file does not exist. We create a new xdg.configFile entry
# with a target of PATH (the original config path) and source being an
# outOfStoreSymlink that points to darkman/variant/PATH. The file
# darkman/variant/PATH is generated in our home manager activation script and
# its contents is swapped to darkman/variant/PATH.light or
# darkman/variant/PATH.dark whenever darkman performs a theme switch. Because
# the file is created by us and pointed to by a symlink, we can safely modify
# it without home manager complaining.
#
# Key points:
# - All theme variants are stored in ~/.config/darkman/variants
# - Application config files are replaced with outOfStoreSymlinks to ~/.config/darkman/variants/*
# - Configs in ~/.config/darkman/variants/* are modified to switch themes
{
  lib,
  pkgs,
  config,
  osConfig',
  vmVariant,
  desktopEnabled,
  ...
}:
let
  inherit (lib)
    mkIf
    mkMerge
    utils
    mapAttrs
    getExe
    concatMapStringsSep
    attrNames
    take
    drop
    concatMap
    nameValuePair
    attrValues
    mkVMOverride
    optionalAttrs
    listToAttrs
    ;
  inherit (config.modules) desktop;
  inherit (osConfig'.device) hassIntegration;
  inherit (config.modules.services.hass) curlCommand;
  cfg = config.modules.desktop.services.darkman;
  darkmanPackage = config.services.darkman.package;

  colorSchemeSwitchingConfiguration =
    let
      inherit (config.modules.colorScheme) colorMap;
      inherit (config.xdg) configHome;
      inherit (lib.hm.dag) entryAfter;
      sed = getExe pkgs.gnused;

      genVariants =
        {
          paths,
          format ? c: c,
          colors ? colorMap,
          ...
        }:
        concatMapStringsSep "\n" (
          path:
          let
            baseColors = attrNames colors;
            sedCommand = # bash
              ''
                # Replacement have to be done over three commands to avoid cycles
                ${sed} ${
                  concatMapStringsSep " "
                    # Replace first four colors with their base name
                    (base: "-e 's/${format colors.${base}.dark}/${base}/g'")
                    (take 4 baseColors)
                } "${configHome}/darkman/variants/${path}.dark" | \
                \
                ${sed} ${
                  concatMapStringsSep " "
                    # Replace all but the first 4 colors with their light variant
                    (base: "-e 's/${format colors.${base}.dark}/${format colors.${base}.light}/g'")
                    (drop 4 baseColors)
                } | \
                \
                ${sed} ${
                  concatMapStringsSep " "
                    # Replace the first 4 base names with their light variant
                    (base: "-e 's/${base}/${format colors.${base}.light}/g'")
                    (take 4 baseColors)
                } > "${configHome}/darkman/variants/${path}.light"
              '';
          in
          # bash
          ''
            if [[ -v DRY_RUN ]]; then
              cat <<EOF
                ${sedCommand}
            EOF
            else
              ${sedCommand}
            fi

            # If the current theme is light then activate the light variant.
            # Prevents the theme resetting to dark when doing home manager
            # rebuilds.
            theme=$(${getExe darkmanPackage} get 2>/dev/null || echo "")
            if [ "$theme" = "light" ]; then
              run --quiet cp "${configHome}/darkman/variants/${path}.light" "${configHome}/darkman/variants/${path}"
            else
              # Use dark config as a placeholder in case darkman fails or is
              # too late to start
              run --quiet install -m644 "${configHome}/darkman/variants/${path}.dark" "${configHome}/darkman/variants/${path}"
            fi
          ''
        ) paths;

      switchScript =
        { paths, theme }:
        concatMapStringsSep "\n" (
          path: # bash
          ''
            cp "${configHome}/darkman/variants/${path}.${theme}" "${configHome}/darkman/variants/${path}"
          '') paths;
    in
    mkIf (cfg.enable && desktopEnabled) {
      xdg.configFile = listToAttrs (
        concatMap (
          value:
          (concatMap (path: [
            (nameValuePair path { target = "darkman/variants/${path}.dark"; })
            (nameValuePair "darkman-${path}" {
              target = path;
              source = config.lib.file.mkOutOfStoreSymlink "${configHome}/darkman/variants/${path}";
            })
          ]) value.paths)
        ) (attrValues cfg.switchApps)
      );

      home.activation."generate-darkman-variants" = entryAfter [ "linkGeneration" ] (
        concatMapStringsSep "\n" (app: genVariants cfg.switchApps.${app}) (attrNames cfg.switchApps)
      );

      modules.desktop.services.darkman.switchScripts = mapAttrs (
        _: value:
        (theme: ''
          ${switchScript {
            inherit (value) paths;
            inherit theme;
          }}
          ${value.reloadScript or ""}
        '')
      ) cfg.switchApps;
    };
in
mkIf (cfg.enable && desktopEnabled) (mkMerge [
  colorSchemeSwitchingConfiguration
  {
    assertions = utils.asserts [
      ((cfg.switchMethod == "hass") -> hassIntegration.enable)
      "Darkman 'hass' switch mode requires the device to have hass integration enabled"
    ];

    modules.desktop.services.darkman.switchMethod = mkIf vmVariant (mkVMOverride "coordinates");

    services.darkman = {
      enable = true;
      darkModeScripts = mapAttrs (_: v: v "dark") cfg.switchScripts;
      lightModeScripts = mapAttrs (_: v: v "light") cfg.switchScripts;

      settings =
        {
          usegeoclue = false;
        }
        // optionalAttrs (cfg.switchMethod == "coordinates") {
          lat = 50.8;
          lng = -0.1;
        };
    };

    xdg.portal.config.common = {
      "org.freedesktop.impl.portal.Settings" = [ "darkman" ];
    };

    desktop.hyprland.binds = [
      "${desktop.hyprland.modKey}, F1, exec, ${getExe darkmanPackage} toggle"
    ];

    systemd.user.services.darkman-solar-switcher = mkIf (cfg.switchMethod == "hass") {
      Unit = {
        Description = "Switch darkman theme based on home assistant brightness entity";
        Requires = [ "darkman.service" ];
        After = [ "darkman.service" ];
      };

      Service = {
        ExecStart = getExe (
          pkgs.writeShellApplication {
            name = "darkman-solar-switcher";
            runtimeInputs = [
              pkgs.coreutils
              pkgs.jaq
              darkmanPackage
            ];
            text = # bash
              ''
                set +e
                current_theme=$(darkman get)
                switch_theme() {
                  if [ "$1" != "$(darkman get)" ]; then
                    darkman set "$1"
                    current_theme="$1"
                  fi
                }

                while true
                do
                  state=$(${
                    curlCommand { endpoint = "states/binary_sensor.dark_mode_brightness_threshold"; }
                  } | jaq -r .state)
                  if [[ "$state" = "on" && ("$current_theme" = "dark" || "$current_theme" = "null") ]]; then
                    switch_theme "light"
                  elif [[ "$state" = "off" && ("$current_theme" = "light" || "$current_theme" = "null") ]]; then
                    switch_theme "dark"
                  elif [ "$current_theme" = "null" ]; then
                    darkman set dark
                  fi
                  sleep 180
                done
              '';
          }
        );
      };

      Install.WantedBy = [ "darkman.service" ];
    };
  }
])
