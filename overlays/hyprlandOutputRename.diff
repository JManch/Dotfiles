diff --git a/src/render/OpenGL.cpp b/src/render/OpenGL.cpp
index 2dd4ca0e..8d8b7fef 100644
--- a/src/render/OpenGL.cpp
+++ b/src/render/OpenGL.cpp
@@ -502,7 +502,7 @@ void CHyprOpenGLImpl::applyScreenShader(const std::string& path) {
     m_sFinalScreenShader.proj   = glGetUniformLocation(m_sFinalScreenShader.program, "proj");
     m_sFinalScreenShader.tex    = glGetUniformLocation(m_sFinalScreenShader.program, "tex");
     m_sFinalScreenShader.time   = glGetUniformLocation(m_sFinalScreenShader.program, "time");
-    m_sFinalScreenShader.output = glGetUniformLocation(m_sFinalScreenShader.program, "output");
+    m_sFinalScreenShader.monitor = glGetUniformLocation(m_sFinalScreenShader.program, "monitor");
     if (m_sFinalScreenShader.time != -1 && g_pConfigManager->getInt("debug:damage_tracking") != 0 && !g_pHyprRenderer->m_bCrashingInProgress) {
         // The screen shader uses the "time" uniform
         // Since the screen shader could change every frame, damage tracking *needs* to be disabled
@@ -794,8 +794,8 @@ void CHyprOpenGLImpl::renderTextureInternalWithDamage(const CTexture& tex, CBox*
         glUniform1f(shader->time, 0.f);
     }
 
-    if (usingFinalShader && shader->output != -1)
-        glUniform1i(shader->output, m_RenderData.pMonitor->ID);
+    if (usingFinalShader && shader->monitor != -1)
+        glUniform1i(shader->monitor, m_RenderData.pMonitor->ID);
 
     if (CRASHING) {
         glUniform1f(shader->distort, g_pHyprRenderer->m_fCrashingDistort);
diff --git a/src/render/Shader.hpp b/src/render/Shader.hpp
index 70fe468c..339ba0c7 100644
--- a/src/render/Shader.hpp
+++ b/src/render/Shader.hpp
@@ -44,7 +44,7 @@ class CShader {
 
     GLint   time    = -1;
     GLint   distort = -1;
-    GLint   output  = -1;
+    GLint   monitor  = -1;
 
     // Blur prepare
     GLint contrast = -1;
