diff --git a/src/Compositor.cpp b/src/Compositor.cpp
index 9bcbdb0f..643e0e67 100644
--- a/src/Compositor.cpp
+++ b/src/Compositor.cpp
@@ -840,9 +840,23 @@ PHLWINDOW CCompositor::vectorToWindowUnified(const Vector2D& pos, uint8_t proper
         }
     }
 
+    // prioritize always on top windows
+    std::vector<PHLWINDOWREF> alwaysOnTopWindows;
+    std::vector<PHLWINDOWREF> windows;
+    windows.reserve(g_pCompositor->m_vWindows.size());
+
+    for (auto const& w : m_vWindows) {
+        if (w->m_bAlwaysOnTop)
+            alwaysOnTopWindows.emplace_back(w);
+        else
+            windows.emplace_back(w);
+    }
+
+    windows.insert(windows.end(), alwaysOnTopWindows.begin(), alwaysOnTopWindows.end());
+
     auto windowForWorkspace = [&](bool special) -> PHLWINDOW {
         auto floating = [&](bool aboveFullscreen) -> PHLWINDOW {
-            for (auto const& w : m_vWindows | std::views::reverse) {
+            for (auto const& w : windows | std::views::reverse) {
 
                 if (special && !w->onSpecialWorkspace()) // because special floating may creep up into regular
                     continue;
@@ -877,12 +891,12 @@ PHLWINDOW CCompositor::vectorToWindowUnified(const Vector2D& pos, uint8_t proper
                                 // TODO: this is wrong, we should focus the parent, but idk how to get it considering it's nullptr in most cases.
                         }
 
-                        return w;
+                        return w.lock();
                     }
 
                     if (!w->m_bIsX11) {
                         if (w->hasPopupAt(pos))
-                            return w;
+                            return w.lock();
                     }
                 }
             }
@@ -2314,7 +2328,7 @@ void CCompositor::setWindowFullscreenState(const PHLWINDOW PWINDOW, SFullscreenS
 
     // make all windows on the same workspace under the fullscreen window
     for (auto const& w : m_vWindows) {
-        if (w->m_pWorkspace == PWORKSPACE && !w->isFullscreen() && !w->m_bFadingOut && !w->m_bPinned)
+        if (w->m_pWorkspace == PWORKSPACE && !w->isFullscreen() && !w->m_bFadingOut && !w->m_bPinned && !w->m_bAlwaysOnTop)
             w->m_bCreatedOverFullscreen = false;
     }
 
diff --git a/src/debug/HyprCtl.cpp b/src/debug/HyprCtl.cpp
index da0b2e28..5bd452b9 100644
--- a/src/debug/HyprCtl.cpp
+++ b/src/debug/HyprCtl.cpp
@@ -240,6 +240,7 @@ std::string CHyprCtl::getWindowData(PHLWINDOW w, eHyprCtlOutputFormat format) {
     "pid": {},
     "xwayland": {},
     "pinned": {},
+    "alwaysOnTop": {},
     "fullscreen": {},
     "fullscreenClient": {},
     "grouped": [{}],
@@ -253,19 +254,19 @@ std::string CHyprCtl::getWindowData(PHLWINDOW w, eHyprCtlOutputFormat format) {
             escapeJSONStrings(!w->m_pWorkspace ? "" : w->m_pWorkspace->m_szName), ((int)w->m_bIsFloating == 1 ? "true" : "false"), (w->m_bIsPseudotiled ? "true" : "false"),
             (int64_t)w->monitorID(), escapeJSONStrings(w->m_szClass), escapeJSONStrings(w->m_szTitle), escapeJSONStrings(w->m_szInitialClass),
             escapeJSONStrings(w->m_szInitialTitle), w->getPID(), ((int)w->m_bIsX11 == 1 ? "true" : "false"), (w->m_bPinned ? "true" : "false"),
-            (uint8_t)w->m_sFullscreenState.internal, (uint8_t)w->m_sFullscreenState.client, getGroupedData(w, format), getTagsData(w, format),
-            (uintptr_t)w->m_pSwallowed.lock().get(), getFocusHistoryID(w), (g_pInputManager->isWindowInhibiting(w, false) ? "true" : "false"));
+            (w->m_bAlwaysOnTop ? "true" : "false"), (uint8_t)w->m_sFullscreenState.internal, (uint8_t)w->m_sFullscreenState.client, getGroupedData(w, format),
+            getTagsData(w, format), (uintptr_t)w->m_pSwallowed.lock().get(), getFocusHistoryID(w), (g_pInputManager->isWindowInhibiting(w, false) ? "true" : "false"));
     } else {
         return std::format(
             "Window {:x} -> {}:\n\tmapped: {}\n\thidden: {}\n\tat: {},{}\n\tsize: {},{}\n\tworkspace: {} ({})\n\tfloating: {}\n\tpseudo: {}\n\tmonitor: {}\n\tclass: {}\n\ttitle: "
             "{}\n\tinitialClass: {}\n\tinitialTitle: {}\n\tpid: "
-            "{}\n\txwayland: {}\n\tpinned: "
+            "{}\n\txwayland: {}\n\tpinned: {}\n\talwaysOnTop: "
             "{}\n\tfullscreen: {}\n\tfullscreenClient: {}\n\tgrouped: {}\n\ttags: {}\n\tswallowing: {:x}\n\tfocusHistoryID: {}\n\tinhibitingIdle: {}\n\n",
             (uintptr_t)w.get(), w->m_szTitle, (int)w->m_bIsMapped, (int)w->isHidden(), (int)w->m_vRealPosition.goal().x, (int)w->m_vRealPosition.goal().y,
             (int)w->m_vRealSize.goal().x, (int)w->m_vRealSize.goal().y, w->m_pWorkspace ? w->workspaceID() : WORKSPACE_INVALID, (!w->m_pWorkspace ? "" : w->m_pWorkspace->m_szName),
             (int)w->m_bIsFloating, (int)w->m_bIsPseudotiled, (int64_t)w->monitorID(), w->m_szClass, w->m_szTitle, w->m_szInitialClass, w->m_szInitialTitle, w->getPID(),
-            (int)w->m_bIsX11, (int)w->m_bPinned, (uint8_t)w->m_sFullscreenState.internal, (uint8_t)w->m_sFullscreenState.client, getGroupedData(w, format), getTagsData(w, format),
-            (uintptr_t)w->m_pSwallowed.lock().get(), getFocusHistoryID(w), (int)g_pInputManager->isWindowInhibiting(w, false));
+            (int)w->m_bIsX11, (int)w->m_bPinned, (int)w->m_bAlwaysOnTop, (uint8_t)w->m_sFullscreenState.internal, (uint8_t)w->m_sFullscreenState.client, getGroupedData(w, format),
+            getTagsData(w, format), (uintptr_t)w->m_pSwallowed.lock().get(), getFocusHistoryID(w), (int)g_pInputManager->isWindowInhibiting(w, false));
     }
 }
 
diff --git a/src/desktop/Window.hpp b/src/desktop/Window.hpp
index 6ed9a525..25f54dc0 100644
--- a/src/desktop/Window.hpp
+++ b/src/desktop/Window.hpp
@@ -314,6 +314,9 @@ class CWindow {
     // For pinned (sticky) windows
     bool m_bPinned = false;
 
+    // For placing above other windows in the workspace
+    bool m_bAlwaysOnTop = false;
+
     // For preserving pinned state when fullscreening a pinned window
     bool m_bPinFullscreened = false;
 
diff --git a/src/desktop/WindowRule.cpp b/src/desktop/WindowRule.cpp
index 7db6c3db..25e12c82 100644
--- a/src/desktop/WindowRule.cpp
+++ b/src/desktop/WindowRule.cpp
@@ -5,7 +5,7 @@
 #include "../config/ConfigManager.hpp"
 
 static const auto RULES = std::unordered_set<std::string>{
-    "float", "fullscreen", "maximize", "noinitialfocus", "pin", "stayfocused", "tile", "renderunfocused",
+    "float", "fullscreen", "maximize", "noinitialfocus", "pin", "alwaysontop", "stayfocused", "tile", "renderunfocused",
 };
 static const auto RULES_PREFIX = std::unordered_set<std::string>{
     "animation", "bordercolor", "bordersize", "center",   "fullscreenstate", "group",          "idleinhibit", "maxsize",       "minsize", "monitor",   "move", "opacity",
@@ -32,6 +32,8 @@ CWindowRule::CWindowRule(const std::string& rule, const std::string& value, bool
         ruleType = RULE_NOINITIALFOCUS;
     else if (rule == "pin")
         ruleType = RULE_PIN;
+    else if (rule == "alwaysontop")
+        ruleType = RULE_ALWAYSONTOP;
     else if (rule == "stayfocused")
         ruleType = RULE_STAYFOCUSED;
     else if (rule == "tile")
diff --git a/src/desktop/WindowRule.hpp b/src/desktop/WindowRule.hpp
index be9c2d9c..ed2b1c5e 100644
--- a/src/desktop/WindowRule.hpp
+++ b/src/desktop/WindowRule.hpp
@@ -15,6 +15,7 @@ class CWindowRule {
         RULE_MAXIMIZE,
         RULE_NOINITIALFOCUS,
         RULE_PIN,
+        RULE_ALWAYSONTOP,
         RULE_STAYFOCUSED,
         RULE_TILE,
         RULE_RENDERUNFOCUSED,
diff --git a/src/events/Windows.cpp b/src/events/Windows.cpp
index c17c425b..33a4550e 100644
--- a/src/events/Windows.cpp
+++ b/src/events/Windows.cpp
@@ -242,6 +242,10 @@ void Events::listener_mapWindow(void* owner, void* data) {
                 PWINDOW->m_bPinned = true;
                 break;
             }
+            case CWindowRule::RULE_ALWAYSONTOP: {
+                PWINDOW->m_bAlwaysOnTop = true;
+                break;
+            }
             case CWindowRule::RULE_FULLSCREEN: {
                 requestedInternalFSMode = FSMODE_FULLSCREEN;
                 break;
@@ -313,6 +317,9 @@ void Events::listener_mapWindow(void* owner, void* data) {
     if (PWINDOW->m_bPinned && !PWINDOW->m_bIsFloating)
         PWINDOW->m_bPinned = false;
 
+    if (PWINDOW->m_bAlwaysOnTop && !PWINDOW->m_bIsFloating)
+        PWINDOW->m_bAlwaysOnTop = false;
+
     const CVarList WORKSPACEARGS = CVarList(requestedWorkspace, 0, ' ');
 
     if (!WORKSPACEARGS[0].empty()) {
diff --git a/src/layout/IHyprLayout.cpp b/src/layout/IHyprLayout.cpp
index 354fc09f..73d11ee5 100644
--- a/src/layout/IHyprLayout.cpp
+++ b/src/layout/IHyprLayout.cpp
@@ -708,7 +708,8 @@ void IHyprLayout::changeWindowFloatingMode(PHLWINDOW pWindow) {
         g_pCompositor->setWindowFullscreenInternal(pWindow, FSMODE_NONE);
     }
 
-    pWindow->m_bPinned = false;
+    pWindow->m_bPinned      = false;
+    pWindow->m_bAlwaysOnTop = false;
 
     const auto TILED = isWindowTiled(pWindow);
 
diff --git a/src/managers/KeybindManager.cpp b/src/managers/KeybindManager.cpp
index e1ad7d60..c7aa6aa6 100644
--- a/src/managers/KeybindManager.cpp
+++ b/src/managers/KeybindManager.cpp
@@ -111,6 +111,7 @@ CKeybindManager::CKeybindManager() {
     m_mDispatchers["swapnext"]                       = swapnext;
     m_mDispatchers["swapactiveworkspaces"]           = swapActiveWorkspaces;
     m_mDispatchers["pin"]                            = pinActive;
+    m_mDispatchers["togglealwaysontop"]              = toggleActiveAlwaysOnTop;
     m_mDispatchers["mouse"]                          = mouse;
     m_mDispatchers["bringactivetotop"]               = bringActiveToTop;
     m_mDispatchers["alterzorder"]                    = alterZOrder;
@@ -2583,6 +2584,31 @@ SDispatchResult CKeybindManager::pinActive(std::string args) {
     return {};
 }
 
+SDispatchResult CKeybindManager::toggleActiveAlwaysOnTop(std::string args) {
+
+    PHLWINDOW PWINDOW = nullptr;
+
+    if (args != "active" && args.length() > 1)
+        PWINDOW = g_pCompositor->getWindowByRegex(args);
+    else
+        PWINDOW = g_pCompositor->m_pLastWindow.lock();
+
+    if (!PWINDOW) {
+        Debug::log(ERR, "togglealwaysontop: window not found");
+        return {.success = false, .error = "togglealwaysontop: window not found"};
+    }
+
+    if (!PWINDOW->m_bIsFloating || PWINDOW->isFullscreen())
+        return {};
+
+    PWINDOW->m_bAlwaysOnTop = !PWINDOW->m_bAlwaysOnTop;
+
+    PWINDOW->updateDynamicRules();
+    g_pCompositor->updateWindowAnimatedDecorationValues(PWINDOW);
+
+    return {};
+}
+
 SDispatchResult CKeybindManager::mouse(std::string args) {
     const auto ARGS    = CVarList(args.substr(1), 2, ' ');
     const auto PRESSED = args[0] == '1';
diff --git a/src/managers/KeybindManager.hpp b/src/managers/KeybindManager.hpp
index c8c6266c..0fa6eeb8 100644
--- a/src/managers/KeybindManager.hpp
+++ b/src/managers/KeybindManager.hpp
@@ -201,6 +201,7 @@ class CKeybindManager {
     static SDispatchResult swapnext(std::string);
     static SDispatchResult swapActiveWorkspaces(std::string);
     static SDispatchResult pinActive(std::string);
+    static SDispatchResult toggleActiveAlwaysOnTop(std::string);
     static SDispatchResult mouse(std::string);
     static SDispatchResult bringActiveToTop(std::string);
     static SDispatchResult alterZOrder(std::string);
diff --git a/src/render/Renderer.cpp b/src/render/Renderer.cpp
index d8b8a847..f7113d61 100644
--- a/src/render/Renderer.cpp
+++ b/src/render/Renderer.cpp
@@ -329,7 +329,8 @@ void CHyprRenderer::renderWorkspaceWindowsFullscreen(PHLMONITOR pMonitor, PHLWOR
 
     // then render windows over fullscreen.
     for (auto const& w : g_pCompositor->m_vWindows) {
-        if (w->m_pWorkspace != pWorkspaceWindow->m_pWorkspace || (!w->m_bCreatedOverFullscreen && !w->m_bPinned) || (!w->m_bIsMapped && !w->m_bFadingOut) || w->isFullscreen())
+        if (w->m_pWorkspace != pWorkspaceWindow->m_pWorkspace || (!w->m_bCreatedOverFullscreen && !w->m_bPinned && !w->m_bAlwaysOnTop) || (!w->m_bIsMapped && !w->m_bFadingOut) ||
+            w->isFullscreen())
             continue;
 
         if (w->m_pMonitor == pWorkspace->m_pMonitor && pWorkspace->m_bIsSpecialWorkspace != w->onSpecialWorkspace())
@@ -402,6 +403,30 @@ void CHyprRenderer::renderWorkspaceWindows(PHLMONITOR pMonitor, PHLWORKSPACE pWo
         if (!w)
             continue;
 
+        if (w->m_bAlwaysOnTop)
+            continue;
+
+        if (!w->m_bIsFloating || w->m_bPinned)
+            continue;
+
+        if (pWorkspace->m_bIsSpecialWorkspace != w->onSpecialWorkspace())
+            continue;
+
+        if (pWorkspace->m_bIsSpecialWorkspace && w->m_pMonitor != pWorkspace->m_pMonitor)
+            continue; // special on another are rendered as a part of the base pass
+
+        // render the bad boy
+        renderWindow(w.lock(), pMonitor, time, true, RENDER_PASS_ALL);
+    }
+
+    // always on top floating windows
+    for (auto& w : windows) {
+        if (!w)
+            continue;
+
+        if (!w->m_bAlwaysOnTop)
+            continue;
+
         if (!w->m_bIsFloating || w->m_bPinned)
             continue;
 
